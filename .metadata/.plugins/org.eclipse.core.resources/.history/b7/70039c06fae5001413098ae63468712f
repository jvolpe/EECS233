import java.util.Random;
import java.util.Date;

/**
 * HeapSort, MergeSort, QuickSort
 * @author josephvolpe
 *
 */
public class Sorting {

	/**
	 * Sort an array using heapsort
	 * @param arr array to sort
	 * @return time to sort in ms
	 */
	public static long heapSort(int[] arr) {
		long beginningTime = new Date().getTime();  //get current time
		Heap heap = new Heap(arr);                  
		heap.buildMaxOnTopHeap();
		for (int end = arr.length - 1; end >= 0; end--) {
			int num = heap.removeMax();
			arr[end] = num;
		}
		long endTime = new Date().getTime();        //get current time after sorting
		return endTime - beginningTime;             //calculate difference in time
	}
	
	/**
	 * Sort an array using quicksort
	 * @param arr array to sort
	 * @return time to sort in ms
	 */
	public static long quickSort(int[] arr) {
		long beginningTime = new Date().getTime();
		recursiveQuickSort(arr, 0, arr.length - 1);
		long endTime = new Date().getTime();
		return endTime - beginningTime;
	}
	
	//public static long mergeSort(int[] arr) {
		
	//}
	
	/**
	 * Recursive method that quicksort calls to call itself over a subarray
	 * @param arr array to sort
	 * @param first the first index of the array to sort
	 * @param last the last index of the array to sort
	 */
	public static void recursiveQuickSort(int[] arr, int first, int last) {
		if (arr.length != 1) {
			int split = parition(arr, first, last);//parition whole array by pivot
			recursiveQuickSort(arr, first, split); //calls QS on the left subarray
			recursiveQuickSort(arr, split, last);  //calls QS on the right subarray
		}
	}
	
	/**
	 * Parition an array by using a pivot to have a left subarray <= pivot and a 
	 * right array be >= pivot
	 * @param arr array to sort
	 * @param first first index of the array to sort
	 * @param last last index of the array to sort
	 * @return the end of the left subarray
	 */
	public static int parition(int[] arr, int first, int last) {
		int pivot = arr[(first + last)/ 2];
		int left = first - 1;
		int right = last + 1;
		while (left <= right) {
			do {
				left++;
			} while (left < pivot);
			do {
				right--;
			} while (right > pivot);
			if (left < right) 
				swap(arr, left, right);
			else 
				return right;
		}
	}
	
	/**
	 * Swap elements at two specified indexes in an array
	 * @param arr the array to swap the elements in
	 * @param i the first index of an element to swap
	 * @param j the second index of an element to swap
	 */
	public static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
	
	/**
	 * Main method
	 * @param args
	 */
	public static void main(String[] args) {
		Random r = new Random();
		int[] toni = new int[1000000];
		for (int i = 0; i < toni.length; i++) {
			int n = r.nextInt();
			if (n < 0)
				n = n*-1;
			n = n%10000;
			toni[i] = n;
		}
		long time = heapSort(toni);
		for (int i = 0; i < toni.length; i++) {
			System.out.println(toni[i]);
		}
		System.out.println("Time: " + time);
	}
}
