import java.util.Random;

/**
 * Test and research on the sorting algorithms in the Sorting class
 * @author josephvolpe
 *
 */
public class Reporting1 {
	
	public static float testHeapSort(int sizeOfArray) {
		Random rand = new Random(sizeOfArray);
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			int n = rand.nextInt(;
			if (n < 0)
				n = n*-1;
			n = n%sizeOfArray;
			testArray[i] = n;
		}
		return Sorting.heapSort(testArray);
	}
	
	public static float testQuickSort(int sizeOfArray) {
		Random rand = new Random(sizeOfArray);
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			int n = rand.nextInt();
			if (n < 0)
				n = n*-1;
			n = n%sizeOfArray;
			testArray[i] = n;
		}
		return Sorting.quickSort(testArray);
	}
	
	public static float testMergeSort(int sizeOfArray) {
		Random rand = new Random(sizeOfArray);
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			int n = rand.nextInt();
			if (n < 0)
				n = n*-1;
			n = n%sizeOfArray;
			testArray[i] = n;
		}
		return 0; //return Sorting.mergeSort(testingArray);
	}
	
	/**
	 * Main method
	 * @param args
	 */
	public static void main(String[] args) {
		
		Random r = new Random();
		int[] toni = new int[1000000];
		for (int i = 0; i < toni.length; i++) {
			int n = r.nextInt();
			if (n < 0)
				n = n*-1;
			n = n%10000;
			toni[i] = n;
		}
		long time = Sorting.quickSort(toni);
		for (int i = 0; i < toni.length; i++) {
			System.out.println(toni[i]);
		}
		System.out.println("Time: " + time);
	}
}
