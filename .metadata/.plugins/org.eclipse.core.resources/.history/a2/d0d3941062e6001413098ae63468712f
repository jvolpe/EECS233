import java.util.Random;

/**
 * Test and research on the sorting algorithms in the Sorting class
 * @author josephvolpe
 *
 */
public class Reporting1 {
	
	/**
	 * Test heapsort's timing for an already sorted array
	 * @param sizeOfArray size of the array
	 * @return time in miliseconds to sort
	 */
	public static float testSortedHeapSort(int sizeOfArray) {
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			testArray[i] = i;
		}
		return Sorting.heapSort(testArray);
	}
	
	/**
	 * Test quicksort's timing for an already sorted array
	 * @param sizeOfArray size of an array
	 * @return time in miliseconds to sort
	 */
	public static float testSortedQuickSort(int sizeOfArray) {
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			testArray[i] = i;
		}
		return Sorting.quickSort(testArray);
	}
	
	/**
	 * Test mergesort's timing for an already sorted array
	 * @param sizeOfArray size of an array
	 * @return time in miliseconds to sort
	 */
	public static float testSortedMergeSort(int sizeOfArray) {
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			testArray[i] = i;
		}
		return 0; //Sorting.mergeSort(testArray);
	}
	
	/**
	 * Test heapsort's timing for a reverse sorted array
	 * @param sizeOfArray size of an array
	 * @return time in miliseconds to sort
	 */
	public static float testReverseHeapSort(int sizeOfArray) {
		int[] testArray = new int[sizeOfArray];
		for (int i = sizeOfArray - 1; i >= 0; i--) {
			testArray[(sizeOfArray - 1) - i] = i;
		}
		return Sorting.heapSort(testArray);
	}
	
	/**
	 * Test quicksort's timing for a reverse sorted array
	 * @param sizeOfArray size of an array
	 * @return time in miliseconds to sort
	 */
	public static float testReverseQuickSort(int sizeOfArray) {
		int[] testArray = new int[sizeOfArray];
		for (int i = sizeOfArray - 1; i >= 0; i--) {
			testArray[(sizeOfArray - 1) - i] = i;
		}
		return Sorting.quickSort(testArray);
	}
	
	/**
	 * Test mergesort's timing for a reverse sorted array
	 * @param sizeOfArray size of an array
	 * @return time in miliseconds to sort
	 */
	public static float testReverseMergeSort(int sizeOfArray) {
		int[] testArray = new int[sizeOfArray];
		for (int i = sizeOfArray - 1; i >= 0; i--) {
			testArray[(sizeOfArray - 1) - i] = i;
		}
		return 0; //Sorting.mergeSort(testArray);
	}
	
	/**
	 * Test heapsort's timing for a randomly sorted array
	 * @param sizeOfArray size of an array
	 * @param seed the seed number of the number generator
	 * @return time in miliseconds to sort
	 */
	public static float testRandomHeapSort(int sizeOfArray, int seed) {
		Random rand = new Random(seed);
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			testArray[i] = rand.nextInt();
		}
		return Sorting.heapSort(testArray);
	}
	
	/**
	 * Test quicksort's timing for a randomy sorted array
	 * @param sizeOfArray size of an array
	 * @param seed the seed number of the number generator
	 * @return time in miliseconds to sort
	 */
	public static float testRandomQuickSort(int sizeOfArray, int seed) {
		Random rand = new Random(seed);
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			testArray[i] = rand.nextInt();
		}
		return Sorting.quickSort(testArray);
	}
	
	/**
	 * Test mergesort's timing for a randomly sorted array
	 * @param sizeOfArray size of an array
	 * @param seed the seed numnber of the number generator
	 * @return time in miliseconds to sort
	 */
	public static float testRandomMergeSort(int sizeOfArray, int seed) {
		Random rand = new Random(seed);
		int[] testArray = new int[sizeOfArray];
		for (int i = 0; i < sizeOfArray; i++) {
			testArray[i] = rand.nextInt();
		}
		return 0; //Sorting.mergeSort(testingArray);
	}
	
	/**
	 * Main method
	 * @param args
	 */
	public static void main(String[] args) {
		float[] sortedHeapSortResults = float[12];
		int index = 0;
		for (int arraySize = 1000; arraySize <= 1000000; arraySize*10) {
			for (int i = 0; i <= 3; i++) 
				sortedHeapSortResults[i] = testSortedHeapSort(arraySize));
		}
		
		float[] sortedQuickSortResults = float[12];
		int index = 0;
		for (int arraySize = 1000; arraySize <= 1000000; arraySize*10) {
			for (int i = 0; i <= 3; i++, index++) 
				sortedHeapQuickResults[index] = testSortedQuickSort(10);
		}
		
		float[] sortedMergeSortResults = float[3];
		for(int i = 0; i <= 3; i++) 
			sortedHeapMergeResults[i] = testSortedMergeSort(10);
		
		float[] reverseHeapSortResults = float[3];
		for(int i = 0; i <= 3; i++) 
			reverseHeapSortResults = testReverseHeapSort(10);
		
		float[] reverseQuickSortResults = float[3];
		for(int i = 0; i <= 3; i++) 
			reverseQuickSortResults[i] = testReverseQuickSort(10);
		
		float[] reverseMergeSortResults = float[3];
		for(int i = 0; i <= 3; i++) 
			reverseMergeSortResults[i] = testReverseMergeSort(10);
		
		float[] randomHeapSortResults = float[3];
		for(int i = 0; i <= 3; i++) 
			randomHeapSortResults[i] = testRandomHeapSort(10);
		
		float[] randomQuickSortResults = float[3];
		for(int i = 0; i <= 3; i++) 
			randomQuickSortResults[i] = testRandomQuickSort(10);
		
		float[] randomMergeSortResults = float[3];
		for(int i = 0; i <= 3; i++) 
			ranodomMergeSortResults[i] = testRandomMergeSort(10);
	}
}
